package org.jresearch.threetenbp.gwt.time.client.loader;

import org.gwtproject.resources.client.ResourcePrototype;

public class TimeJsBundleImpl implements TimeJsBundle {
  private static TimeJsBundleImpl _instance0 = new TimeJsBundleImpl();
  private void supportInitializer() {
    support = new org.gwtproject.resources.client.TextResource() {
      // file:/home/treblereel/workspace/gwt/gwt-datetime/gwt-time/src/main/java/org/jresearch/threetenbp/gwt/time/client/loader/support.js
      public String getText() {
        return "if (window.performance.now) {\r\n    getTimestamp = function() { return window.performance.timing.navigationStart + window.performance.now(); };\r\n} else {\r\n    getTimestamp = function() { return new Date().getTime(); };\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().resolvedOptions == 'function') {\r\n	getTimezone = function() { return Intl.DateTimeFormat().resolvedOptions().timeZone; };\r\n} else {\r\n	getTimezone = function() { return new Date().toTimeString().slice(9, 17); };\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat.supportedLocalesOf == 'function') {\r\n	supportedLocalesOfDateTimeFormat = function(locales) {\r\n		return Intl.DateTimeFormat.supportedLocalesOf(locales, { localeMatcher: 'lookup' });\r\n	};\r\n} else {\r\n	supportedLocalesOfDateTimeFormat = function(locales) {\r\n		return [\"ROOT\", \"US\"];\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.NumberFormat == 'function'  && typeof Intl.NumberFormat.supportedLocalesOf == 'function') {\r\n	supportedLocalesOfNumberFormat = function(locales) {\r\n		return Intl.NumberFormat.supportedLocalesOf(locales, { localeMatcher: 'lookup' });\r\n	};\r\n} else {\r\n	supportedLocalesOfNumberFormat = function(locales) {\r\n		return [\"ROOT\", \"US\"];\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().formatToParts == 'function') {\r\n	displayTimeZone = function(daylight, timeZone, style, locale) {\r\n		try {\r\n			const region = new Intl.DateTimeFormat(locale, { timeZone: timeZone, timeZoneName: style });\r\n			const month = daylight ? 6 : 12;\r\n			const date = new Date(Date.UTC(2012, month, 20, 6, 0, 0));\r\n			return region.formatToParts(date).find(checkTimeZone).value;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayTimeZone with daylight %s, timeZone %s, style %s, locale %s: %s\", daylight, timeZone, style, locale, e);\r\n			return timeZone;\r\n		}\r\n	};\r\n} else {\r\n	displayTimeZone = function(daylight, timeZone, style, locale) {\r\n		return timeZone;\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().formatToParts == 'function') {\r\n	displayMonths = function(style, standalone, locale) {\r\n		try {\r\n			var result = [];\r\n			const region = standalone ? new Intl.DateTimeFormat(locale, { month: style }) : new Intl.DateTimeFormat(locale, { month: style, day: 'numeric' });\r\n			for (i = 0; i < 12; i++) {\r\n				const date = new Date(Date.UTC(2020, i, 4, 6, 0, 0));\r\n				result.push(region.formatToParts(date).find(checkMonth).value);\r\n			}\r\n			return result;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayMonths with style %s, locale %s: %s\", style, locale, e);\r\n			return [];\r\n		}\r\n	};\r\n} else {\r\n	displayMonths = function(style, locale) {\r\n		switch (style) {\r\n		case \"narrow\":\r\n			return [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\r\n		case \"short\":\r\n			return [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n		default:\r\n			return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n		}\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().formatToParts == 'function') {\r\n	displayWeekdays = function(style, standalone, locale) {\r\n		try {\r\n			var result = [];\r\n			const region = standalone ? new Intl.DateTimeFormat(locale, { weekday: style }) : new Intl.DateTimeFormat(locale, { weekday: style, day: 'numeric' });\r\n			for (i = 1; i <= 7; i++) {\r\n				const date = new Date(Date.UTC(2020, 5, i, 6, 0, 0));\r\n				result.push(region.formatToParts(date).find(checkWeekday).value);\r\n			}\r\n			return result;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayMonths with style %s, locale %s: %s\", style, locale, e);\r\n			return [];\r\n		}\r\n	};\r\n} else {\r\n	displayWeekdays = function(style, locale) {\r\n		switch (style) {\r\n		case \"narrow\":\r\n			return [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\r\n		case \"short\":\r\n			return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n		default:\r\n			return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n		}\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().formatToParts == 'function') {\r\n	displayEras = function(style, locale) {\r\n		try {\r\n			var result = [];\r\n			const region = new Intl.DateTimeFormat(locale, { era: style });\r\n			var date = new Date(-99999999999999);\r\n			result.push(region.formatToParts(date).find(checkEra).value);\r\n			date = new Date(99999999999999);\r\n			result.push(region.formatToParts(date).find(checkEra).value);\r\n			return result;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayMonths with style %s, locale %s: %s\", style, locale, e);\r\n			return [];\r\n		}\r\n	};\r\n} else {\r\n	displayEras = function(style, locale) {\r\n		switch (style) {\r\n		case \"narrow\":\r\n			return [\"B\", \"A\"];\r\n		case \"short\":\r\n			return [\"BC\", \"AD\"];\r\n		default:\r\n			return [\"Before Christ\", \"Anno Domini\"];\r\n		}\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.DateTimeFormat == 'function'  && typeof Intl.DateTimeFormat().formatToParts == 'function') {\r\n	displayAmpm = function(style, locale) {\r\n		try {\r\n			var result = [];\r\n			const region = new Intl.DateTimeFormat(locale, { dayPeriod: style, hour: 'numeric', hour12: 'false' });\r\n			var date = new Date(Date.UTC(2020, 5, 4, 6, 0, 0));\r\n			result.push(region.formatToParts(date).find(checkAmpm).value);\r\n			date = new Date(Date.UTC(2020, 5, 4, 16, 0, 0));\r\n			result.push(region.formatToParts(date).find(checkAmpm).value);\r\n			return result;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayMonths with style %s, locale %s: %s\", style, locale, e);\r\n			return [];\r\n		}\r\n	};\r\n} else {\r\n	displayAmpm = function(style, locale) {\r\n		return [\"AM\", \"PM\"]\r\n	};\r\n}\r\n\r\nif (typeof Intl == 'object' && typeof Intl.NumberFormat == 'function'  && typeof Intl.NumberFormat().formatToParts == 'function') {\r\n	displayNumber = function(locale) {\r\n		var result = new Object();\r\n		try {\r\n			const numFormat = new Intl.NumberFormat(locale, { signDisplay:'always' });\r\n			result.zeroDigit = numFormat.formatToParts(0).find(checkZero).value;\r\n			//FF does not support signDisplay return +\r\n			var res = numFormat.formatToParts(1).find(checkPlus)\r\n			result.positiveSign = res === undefined ? '+' : res.value ;\r\n			result.negativeSign = numFormat.formatToParts(-1).find(checkMinus).value;\r\n			result.decimalSeparator = numFormat.formatToParts(1.5).find(checkPoint).value;\r\n		} catch (e) {\r\n			console.error(\"Error while call displayNumber, locale %s: %s\", locale, e);\r\n			result.zeroDigit = '0';\r\n			result.positiveSign = '+';\r\n			result.negativeSign = '-';\r\n			result.decimalSeparator = '.';\r\n		}\r\n		return result;\r\n	};\r\n} else {\r\n	displayNumber = function(locale) {\r\n		var result = new Object();\r\n		result.zeroDigit = '0';\r\n		result.positiveSign = '+';\r\n		result.negativeSign = '-';\r\n		result.decimalSeparator = '.';\r\n		return result;\r\n	};\r\n}\r\n\r\nfunction sleep(milliseconds) {\r\n	var start = getTimestamp();\r\n	var current = getTimestamp();\r\n	while(current - start < milliseconds) {\r\n		current = getTimestamp();\r\n	}\r\n}\r\n\r\nfunction displayTimeZoneModern(daylight, timeZone, style, locale) {\r\n	const region = new Intl.DateTimeFormat(locale, { timeZone: timeZone, timeZoneName: style });\r\n	const month = daylight ? 6 : 12;\r\n	const date = new Date(Date.UTC(2012, month, 20, 6, 0, 0));\r\n	return region.formatToParts(date).find(checkType).value;\r\n}\r\n\r\nfunction checkZero(part) {\r\n	  return part.type === \"integer\";\r\n}\r\n\r\nfunction checkPlus(part) {\r\n	  return part.type === \"plusSign\";\r\n}\r\n\r\nfunction checkMinus(part) {\r\n	  return part.type === \"minusSign\";\r\n}\r\n\r\nfunction checkPoint(part) {\r\n	  return part.type === \"decimal\";\r\n}\r\n\r\nfunction checkTimeZone(part) {\r\n	  return part.type === \"timeZoneName\";\r\n}\r\n\r\nfunction checkMonth(part) {\r\n	  return part.type === \"month\";\r\n}\r\n\r\nfunction checkWeekday(part) {\r\n	  return part.type === \"weekday\";\r\n}\r\n\r\nfunction checkEra(part) {\r\n	  return part.type === \"era\";\r\n}\r\n\r\nfunction checkAmpm(part) {\r\n	  return part.type === \"dayPeriod\";\r\n}\r\n\r\nfunction displayTimeZoneLegacy(daylight, timeZone, style, locale) {\r\n	const month = daylight ? 6 : 12;\r\n	const date = new Date(Date.UTC(2012, month, 20, 6, 0, 0));\r\n	return date.toLocaleDateString(locale, { timeZone: timeZone, timeZoneName: style }).slice(11);\r\n}";
      }
      public String getName() {
        return "support";
      }
    }
    ;
  }
  private static class supportInitializer {
    static {
      _instance0.supportInitializer();
    }
    static org.gwtproject.resources.client.TextResource get() {
      return support;
    }
  }
  public org.gwtproject.resources.client.TextResource support() {
    return supportInitializer.get();
  }
  private static java.util.HashMap<String, ResourcePrototype> resourceMap;
  private static org.gwtproject.resources.client.TextResource support;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      support(), 
    };
  }
  public ResourcePrototype getResource(String name) {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<String, ResourcePrototype>();
        resourceMap.put("support", support());
      }
      return resourceMap.get(name);
  }
}
